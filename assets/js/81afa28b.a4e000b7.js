"use strict";(self.webpackChunkzed_docs=self.webpackChunkzed_docs||[]).push([[4646],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,f=d["".concat(p,".").concat(m)]||d[m]||s[m]||a;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6007:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],l={},p=void 0,c={unversionedId:"zq/functions/order",id:"zq/functions/order",title:"order",description:"Function",source:"@site/docs/zq/functions/order.md",sourceDirName:"zq/functions",slug:"/zq/functions/order",permalink:"/docs/zq/functions/order",editUrl:"https://github.com/brimdata/zed-docs/tree/main/docs/zq/functions/order.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"now",permalink:"/docs/zq/functions/now"},next:{title:"parse_uri",permalink:"/docs/zq/functions/parse_uri"}},u={},s=[{value:"Function",id:"function",level:3},{value:"Synopsis",id:"synopsis",level:3},{value:"Description",id:"description",level:3},{value:"Examples",id:"examples",level:3}],d={toc:s};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"function"},"Function"),(0,a.kt)("p",null,"\u2003"," ",(0,a.kt)("strong",{parentName:"p"},"order")," ","\u2014"," reorder record fields"),(0,a.kt)("h3",{id:"synopsis"},"Synopsis"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"order(val: any, t: type) -> any\n")),(0,a.kt)("h3",{id:"description"},"Description"),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"order")," function changes the order of fields in the input value ",(0,a.kt)("inlineCode",{parentName:"p"},"val"),"\nto match the order of records in type ",(0,a.kt)("inlineCode",{parentName:"p"},"t"),". Ordering is useful when the\ninput is in an unordered format (such as JSON), to ensure that all records\nhave the same known order."),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"val")," is a record (or if any of its nested values is a record):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'order passes through "extra" fields not present in the type value,'),(0,a.kt)("li",{parentName:"ul"},"extra fields in the input are added to the right-hand side, ordered lexicographically,"),(0,a.kt)("li",{parentName:"ul"},"missing fields are ignored, and"),(0,a.kt)("li",{parentName:"ul"},"types of leaf values are ignored, i.e., there is no casting.")),(0,a.kt)("p",null,"Note that lexicographic order for fields in a record can be achieved with\nthe empty record type, i.e.,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"order(val, <{}>)\n")),(0,a.kt)("h3",{id:"examples"},"Examples"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Order a record")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-mdtest-command"},"echo '{b:\"foo\", a:1}' | zq -z 'order(this, <{a:int64,b:string}>)' -\n")),(0,a.kt)("p",null,"produces"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{a:1,b:"foo"}\n')),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Order fields lexicographically")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-mdtest-command"},"echo '{c:0, a:1, b:\"foo\"}' | zq -z 'order(this, <{}>)' -\n")),(0,a.kt)("p",null,"produces"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{a:1,b:"foo",c:0}\n')),(0,a.kt)("p",null,"TBD: fix this bug or remove example..."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Order an array of records")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-mdtest-command-skip"},"echo '[{b:1,a:1},{a:2,b:2}]' | zq -z 'order(this, <[{a:int64,b:int64}]>)' -\n")),(0,a.kt)("p",null,"produces"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-mdtest-output-skip"},"[{a:1,b:1},{a:2,b:2}]\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Non-records are returned unmodified")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-mdtest-command"},"echo '10.0.0.1 1 \"foo\"' | zq -z 'fill(this, <{a:int64,b:int64}>)' -\n")),(0,a.kt)("p",null,"produces"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'10.0.0.1\n1\n"foo"\n')))}m.isMDXComponent=!0}}]);