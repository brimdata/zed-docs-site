"use strict";(self.webpackChunkzed_docs=self.webpackChunkzed_docs||[]).push([[9803],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6546:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={},l=void 0,u={unversionedId:"zq/functions/is",id:"zq/functions/is",title:"is",description:"Function",source:"@site/docs/zq/functions/is.md",sourceDirName:"zq/functions",slug:"/zq/functions/is",permalink:"/zed-docs-site/docs/zq/functions/is",editUrl:"https://github.com/brimdata/zed-docs/tree/main/docs/zq/functions/is.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"hex",permalink:"/zed-docs-site/docs/zq/functions/hex"},next:{title:"is_error",permalink:"/zed-docs-site/docs/zq/functions/is_error"}},p={},c=[{value:"Function",id:"function",level:3},{value:"Synopsis",id:"synopsis",level:3},{value:"Description",id:"description",level:3},{value:"Examples",id:"examples",level:3}],d={toc:c};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"function"},"Function"),(0,i.kt)("p",null,"\u2003"," ",(0,i.kt)("strong",{parentName:"p"},"is")," ","\u2014"," test a value's type"),(0,i.kt)("h3",{id:"synopsis"},"Synopsis"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"is(t: type) -> bool\nis(val: any, t: type) -> bool\n")),(0,i.kt)("h3",{id:"description"},"Description"),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"is")," function returns true if the argument ",(0,i.kt)("inlineCode",{parentName:"p"},"val")," is of type ",(0,i.kt)("inlineCode",{parentName:"p"},"t"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"val"),"\nis omitted, it defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"this"),".  The ",(0,i.kt)("em",{parentName:"p"},"is")," function is shorthand for ",(0,i.kt)("inlineCode",{parentName:"p"},"typeof(val)==t"),"."),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("p",null,"Test simple types:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command"},"echo '1.' | zq -z 'yield {yes:is(<float64>),no:is(<int64>)}' -\n")),(0,i.kt)("p",null,"=>"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"{yes:true,no:false}\n")),(0,i.kt)("p",null,'Test for a given input\'s record type or "shape":'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command"},"echo '{s:\"hello\"}' | zq -z 'yield is(<{s:string}>)' -\n")),(0,i.kt)("p",null,"=>"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"true\n")),(0,i.kt)("p",null,"If you test a named type with it's underlying type, the types are different,\nbut if you use the type name or typeunder function, there is a match:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command"},"echo '{s:\"hello\"}(=foo)' | zq -z 'yield is(<{s:string}>)' -\necho '{s:\"hello\"}(=foo)' | zq -z 'yield is(<foo>)' -\n")),(0,i.kt)("p",null,"=>"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"false\ntrue\n")),(0,i.kt)("p",null,"To test the underlying type, just use ",(0,i.kt)("inlineCode",{parentName:"p"},"=="),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-command"},"echo '{s:\"hello\"}(=foo)' | zq -z 'yield typeunder(this)==<{s:string}>' -\n")),(0,i.kt)("p",null,"=>"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"true\n")))}m.isMDXComponent=!0}}]);