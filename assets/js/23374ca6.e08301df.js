"use strict";(self.webpackChunkzed_docs=self.webpackChunkzed_docs||[]).push([[8421],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=d(n),u=o,h=c["".concat(s,".").concat(u)]||c[u]||p[u]||i;return n?a.createElement(h,r(r({ref:t},m),{},{components:n})):a.createElement(h,r({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var d=2;d<i;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6527:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],l={sidebar_position:0,sidebar_label:"Intro"},s="Zed Documentation",d={unversionedId:"README",id:"README",title:"Zed Documentation",description:"The Zed documentation is organized as follows:",source:"@site/docs/README.md",sourceDirName:".",slug:"/",permalink:"/docs/",editUrl:"https://github.com/brimdata/zed/tree/main/docs/README.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0,sidebar_label:"Intro"},sidebar:"tutorialSidebar",next:{title:"Install",permalink:"/docs/install"}},m={},p=[{value:"Terminology",id:"terminology",level:2},{value:"Tooling",id:"tooling",level:2},{value:"Design Philosophy",id:"design-philosophy",level:3}],c={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"zed-documentation"},"Zed Documentation"),(0,i.kt)("p",null,"The Zed documentation is organized as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/zq/"},"zq")," - the ",(0,i.kt)("inlineCode",{parentName:"li"},"zq")," command-line tool and Zed query language"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/zed/"},"zed")," - the ",(0,i.kt)("inlineCode",{parentName:"li"},"zed")," command-line tool for managing Zed data lakes and the\nAPI for interacting with a Zed lake"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"tutorials"},"tutorials")," - tutorials on Zed"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/formats/"},"formats")," - the Zed data model and serialization formats\nof Zed data")),(0,i.kt)("h2",{id:"terminology"},"Terminology"),(0,i.kt)("p",null,'"Zed" is an umbrella term that describes\na number of different elements of the system:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("a",{parentName:"li",href:"/docs/formats/zed"},"Zed data model")," is the abstract definition of the data types and semantics\nthat underlie the Zed formats."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("a",{parentName:"li",href:"/docs/formats/"},"Zed formats")," are a family of\n",(0,i.kt)("a",{parentName:"li",href:"/docs/formats/zng"},"sequential (ZNG)"),", ",(0,i.kt)("a",{parentName:"li",href:"/docs/formats/zst"},"columnar (ZST)"),",\nand ",(0,i.kt)("a",{parentName:"li",href:"/docs/formats/zson"},"human-readable (ZSON)")," formats that all adhere to the\nsame abstract Zed data model."),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("a",{parentName:"li",href:"/docs/zed/"},"Zed lake")," is a collection of optionally-indexed Zed data stored\nacross one or more ",(0,i.kt)("a",{parentName:"li",href:"/docs/zed/#14-data-pools"},"data pools")," with ACID commit semantics and\naccessed via a ",(0,i.kt)("a",{parentName:"li",href:"https://git-scm.com/"},"Git"),"-like API."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("a",{parentName:"li",href:"/docs/zq/language"},"Zed language")," is the system's dataflow language for performing\nqueries, searches, analytics, transformations, or any of the above combined together."),(0,i.kt)("li",{parentName:"ul"},"A  ",(0,i.kt)("a",{parentName:"li",href:"/docs/zq/language#1-introduction"},"Zed query")," is a Zed script that performs\nsearch and/or analytics."),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("a",{parentName:"li",href:"/docs/zq/language#9-shaping"},"Zed shaper")," is a Zed script that performs\ndata transformation to ",(0,i.kt)("em",{parentName:"li"},"shape"),'\nthe input data into the desired set of organizing Zed data types called "shapes",\nwhich are traditionally called ',(0,i.kt)("em",{parentName:"li"},"schemas")," in relational systems but are\nmuch more flexible in the Zed system.")),(0,i.kt)("h2",{id:"tooling"},"Tooling"),(0,i.kt)("p",null,"The Zed system is managed and queried with the ",(0,i.kt)("inlineCode",{parentName:"p"},"zed")," command,\nwhich is organized into numerous subcommands like the familiar command patterns\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"docker")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectrl"),".\nBuilt-in help for the ",(0,i.kt)("inlineCode",{parentName:"p"},"zed")," command and all of its subcommands is always\naccessible with the ",(0,i.kt)("inlineCode",{parentName:"p"},"-h")," flag."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"zq")," command offers a convenient slice of ",(0,i.kt)("inlineCode",{parentName:"p"},"zed")," for running\nstand-alone, command-line queries on inputs from files, HTTP URLs, or S3.\n",(0,i.kt)("inlineCode",{parentName:"p"},"zq")," is like ",(0,i.kt)("a",{parentName:"p",href:"https://stedolan.github.io/jq/"},(0,i.kt)("inlineCode",{parentName:"a"},"jq"))," but is easier and faster, utilizes the richer\nZed data model, and interoperates with a number of other formats beyond JSON.\nIf you don't need a Zed lake, you can install just the\nslimmer ",(0,i.kt)("inlineCode",{parentName:"p"},"zq")," command which omits lake support and dev tools."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"zq")," is always installed alongside ",(0,i.kt)("inlineCode",{parentName:"p"},"zed"),".  You might find yourself mixing and\nmatching ",(0,i.kt)("inlineCode",{parentName:"p"},"zed")," lake queries with ",(0,i.kt)("inlineCode",{parentName:"p"},"zq")," local queries and stitching them\nall together with Unix pipelines."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/docs/zq/language"},"Zed language documentation"),"\nis the best way to learn about ",(0,i.kt)("inlineCode",{parentName:"p"},"zq"),".\nAll of its examples use ",(0,i.kt)("inlineCode",{parentName:"p"},"zq")," commands run on the command line.\nRun ",(0,i.kt)("inlineCode",{parentName:"p"},"zq -h")," for a list of command options and online help."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/docs/zed/"},"Zed Lake documentation"),"\nis the best way to learn about ",(0,i.kt)("inlineCode",{parentName:"p"},"zed"),".\nAll of its examples use ",(0,i.kt)("inlineCode",{parentName:"p"},"zed")," commands run on the command line.\nRun ",(0,i.kt)("inlineCode",{parentName:"p"},"zed -h")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"-h")," with any subcommand for a list of command options\nand online help.  The same language query that works for ",(0,i.kt)("inlineCode",{parentName:"p"},"zq")," operating\non local files or streams also works for ",(0,i.kt)("inlineCode",{parentName:"p"},"zed query")," operating on a lake."),(0,i.kt)("p",null,"To install zq and or zed, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/install"},"installation instructions"),"."),(0,i.kt)("h3",{id:"design-philosophy"},"Design Philosophy"),(0,i.kt)("p",null,"The design philosophy for Zed is based on composable building blocks\nbuilt from self-describing data structures.  Everything in a Zed lake\nis built from Zed data and each system component can be run and tested in isolation."),(0,i.kt)("p",null,"Since Zed data is self-describing, this approach makes stream composition\nvery easy.  Data from a Zed query can trivially be piped to a local\ninstance of ",(0,i.kt)("inlineCode",{parentName:"p"},"zq")," by feeding the resulting Zed stream to stdin of ",(0,i.kt)("inlineCode",{parentName:"p"},"zq"),", for example,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'zed query "from pool | ...remote query..." | zq "...local query..." -\n')),(0,i.kt)("p",null,"There is no need to configure the Zed entities with schema information\nlike ",(0,i.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/docs/proto3"},"proto configs"),"\nor connections to\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.confluent.io/platform/current/schema-registry/index.html"},"schema registries"),"."),(0,i.kt)("p",null,"A Zed lake is completely self-contained, requiring no auxiliary databases\n(like the ",(0,i.kt)("a",{parentName:"p",href:"https://cwiki.apache.org/confluence/display/hive/design"},"Hive metastore"),")\nor other third-party services to interpret the lake data.\nOnce copied, a new service can be instantiated by pointing a ",(0,i.kt)("inlineCode",{parentName:"p"},"zed serve"),"\nat the copy of the lake."),(0,i.kt)("p",null,"Functionality like indexing, data compaction, and retention are all\nAPI-driven."),(0,i.kt)("p",null,"Bite-sized components are unified by the Zed data, usually in the ZNG format:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"All lake meta-data is available via meta-queries."),(0,i.kt)("li",{parentName:"ul"},"All like operations available through the service API are also available\ndirectly via the ",(0,i.kt)("inlineCode",{parentName:"li"},"zed")," command."),(0,i.kt)("li",{parentName:"ul"},"Search indexes and aggregate partials are all just ZNG files and you can\nlearn about the Zed lake by simply running ",(0,i.kt)("inlineCode",{parentName:"li"},"zq")," on the various ZNG files\nin a cloud store."),(0,i.kt)("li",{parentName:"ul"},"Lake management is agent-driven through the API.  For example, instead of complex policies\nlike data compaction being implemented in the core with some fixed set of\nalgorithms and policies, an agent can simply hit the API to obtain the meta-data\nof the objects in the lake, analyze the objects (e.g., looking for too much\nkey space overlap) and issue API commands to merge overlapping objects\nand delete the old fragmented objects, all with the transactional consistency\nof the commit log."),(0,i.kt)("li",{parentName:"ul"},"Components are easily tested and debugged in isolation.")))}u.isMDXComponent=!0}}]);