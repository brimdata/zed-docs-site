"use strict";(self.webpackChunkzed_docs=self.webpackChunkzed_docs||[]).push([[2339],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),i=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=i(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=i(n),d=a,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var i=2;i<o;i++)s[i]=n[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1640:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],l={},p=void 0,i={unversionedId:"zq/functions/grep",id:"zq/functions/grep",title:"grep",description:"Function",source:"@site/docs/zq/functions/grep.md",sourceDirName:"zq/functions",slug:"/zq/functions/grep",permalink:"/zed-docs-site/docs/zq/functions/grep",editUrl:"https://github.com/brimdata/zed-docs/tree/main/docs/zq/functions/grep.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"floor",permalink:"/zed-docs-site/docs/zq/functions/floor"},next:{title:"has",permalink:"/zed-docs-site/docs/zq/functions/has"}},c={},u=[{value:"Function",id:"function",level:3},{value:"Synopsis",id:"synopsis",level:3},{value:"Description",id:"description",level:3},{value:"Examples",id:"examples",level:3}],m={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"function"},"Function"),(0,o.kt)("p",null,"\u2003"," ",(0,o.kt)("strong",{parentName:"p"},"grep")," ","\u2014"," search strings inside of values"),(0,o.kt)("h3",{id:"synopsis"},"Synopsis"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"grep(<pattern> [, e: any]) -> bool\n")),(0,o.kt)("h3",{id:"description"},"Description"),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"grep")," function searches all of the strings in its input value ",(0,o.kt)("inlineCode",{parentName:"p"},"e"),"\n(or ",(0,o.kt)("inlineCode",{parentName:"p"},"this")," if ",(0,o.kt)("inlineCode",{parentName:"p"},"e")," is not given)\nusing the ",(0,o.kt)("inlineCode",{parentName:"p"},"<pattern>")," argument, which must be a\n",(0,o.kt)("a",{parentName:"p",href:"/zed-docs-site/docs/zq/language#regular-expressions"},"regular expression"),",\n",(0,o.kt)("a",{parentName:"p",href:"/zed-docs-site/docs/zq/language#globs"},"glob pattern"),", or string literal.\nIf the pattern matches for any string, then the result is ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),".  Otherwise, it is ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note that string matches are case insensitive while regular expression\nand glob matches are case sensitive.  In a forthcoming release, case sensitivity\nwill be a expressible for all three pattern types.")),(0,o.kt)("p",null,"The entire input value is traversed:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"for records, each field name is traversed and each field value is traversed or descended\nif a complex type,"),(0,o.kt)("li",{parentName:"ul"},"for arrays and sets, each element is traversed or descended if a complex type, and"),(0,o.kt)("li",{parentName:"ul"},"for maps, each key and value is traversed or descended if a complex type.")),(0,o.kt)("h3",{id:"examples"},"Examples"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Reach into nested records")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mdtest-command"},"echo '{foo:10}{bar:{s:\"baz\"}}' | zq -z 'grep(\"baz\")' -\n")),(0,o.kt)("p",null,"=>"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{bar:{s:"baz"}}\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"It only matches string fields")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mdtest-command"},"echo '{foo:10}{bar:{s:\"baz\"}}' | zq -z 'grep(\"10\")' -\n")),(0,o.kt)("p",null,"=>"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Match a field name")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mdtest-command"},"echo '{foo:10}{bar:{s:\"baz\"}}' | zq -z 'grep(\"foo\")' -\n")),(0,o.kt)("p",null,"=>"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mdtest-output"},"{foo:10}\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Regular expression")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mdtest-command"},"echo '{foo:10}{bar:{s:\"baz\"}}' | zq -z 'grep(/foo|baz/)' -\n")),(0,o.kt)("p",null,"=>"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{foo:10}\n{bar:{s:"baz"}}\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Glob with a second argument")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mdtest-command"},'echo \'{s:"bar"}{s:"foo"}{s:"baz"}{t:"baz"}\' | zq -z \'grep(b*, s)\' -\n')),(0,o.kt)("p",null,"=>"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mdtest-output"},'{s:"bar"}\n{s:"baz"}\n')))}d.isMDXComponent=!0}}]);